{"ast":null,"code":"import _defineProperty from \"/home/juanma/projects/membrane-front/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/home/juanma/projects/membrane-front/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useCallback, useState } from 'react';\nimport Utils from '../lib/utils';\nimport { getEntries, updateEntryStatus } from '../services/whitelisting';\nexport default function useWhitelisting() {\n  _s();\n\n  var _useState = useState(false),\n      fetchingEntries = _useState[0],\n      setFetchingEntries = _useState[1];\n\n  var _useState2 = useState([]),\n      entries = _useState2[0],\n      setEntries = _useState2[1];\n\n  var _useState3 = useState(0),\n      totalEntries = _useState3[0],\n      setTotalEntries = _useState3[1];\n\n  var fetchEntries = useCallback(function (queryParams) {\n    setFetchingEntries(true);\n    setEntries([]);\n    setTotalEntries(0);\n    return getEntries(queryParams).then(function (response) {\n      var entries = response.entries,\n          totalCount = response.totalCount;\n      setFetchingEntries(false);\n      setEntries(entries || []);\n      setTotalEntries(totalCount || 0);\n    })[\"catch\"](function (error) {\n      setFetchingEntries(false);\n      throw new Error(Utils.parseApiError(error));\n    });\n  }, []);\n  var changeEntryStatus = useCallback(function (entryId, status) {\n    var oldList = _toConsumableArray(entries);\n\n    var newList = entries.map(function (o) {\n      return o.id === entryId ? _objectSpread(_objectSpread({}, o), {}, {\n        status: status\n      }) : o;\n    });\n    setEntries(newList);\n    return updateEntryStatus(entryId, status)[\"catch\"](function (error) {\n      setEntries(oldList);\n      throw new Error(Utils.parseApiError(error));\n    });\n  }, [entries]);\n  return {\n    fetchEntries: fetchEntries,\n    changeEntryStatus: changeEntryStatus,\n    fetchingEntries: fetchingEntries,\n    entries: entries,\n    totalEntries: totalEntries\n  };\n}\n\n_s(useWhitelisting, \"egFDILHS4GrNDDXPt2r0l7fwkVA=\");","map":{"version":3,"sources":["/home/juanma/projects/membrane-front/src/legacy/hooks/useWhitelisting.js"],"names":["useCallback","useState","Utils","getEntries","updateEntryStatus","useWhitelisting","fetchingEntries","setFetchingEntries","entries","setEntries","totalEntries","setTotalEntries","fetchEntries","queryParams","then","response","totalCount","error","Error","parseApiError","changeEntryStatus","entryId","status","oldList","newList","map","o","id"],"mappings":";;;;;;;;;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,OAAOC,KAAP,MAAkB,cAAlB;AAEA,SACEC,UADF,EAEEC,iBAFF,QAGO,0BAHP;AAKA,eAAe,SAASC,eAAT,GAA2B;AAAA;;AAAA,kBACMJ,QAAQ,CAAC,KAAD,CADd;AAAA,MACjCK,eADiC;AAAA,MAChBC,kBADgB;;AAAA,mBAEVN,QAAQ,CAAC,EAAD,CAFE;AAAA,MAEjCO,OAFiC;AAAA,MAExBC,UAFwB;;AAAA,mBAGAR,QAAQ,CAAC,CAAD,CAHR;AAAA,MAGjCS,YAHiC;AAAA,MAGnBC,eAHmB;;AAKxC,MAAMC,YAAY,GAAGZ,WAAW,CAC9B,UAAAa,WAAW,EAAI;AACbN,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAE,IAAAA,UAAU,CAAC,EAAD,CAAV;AACAE,IAAAA,eAAe,CAAC,CAAD,CAAf;AACA,WAAOR,UAAU,CAACU,WAAD,CAAV,CACJC,IADI,CACC,UAAAC,QAAQ,EAAI;AAAA,UACRP,OADQ,GACgBO,QADhB,CACRP,OADQ;AAAA,UACCQ,UADD,GACgBD,QADhB,CACCC,UADD;AAEhBT,MAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACAE,MAAAA,UAAU,CAACD,OAAO,IAAI,EAAZ,CAAV;AACAG,MAAAA,eAAe,CAACK,UAAU,IAAI,CAAf,CAAf;AACD,KANI,WAOE,UAAAC,KAAK,EAAI;AACdV,MAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACA,YAAM,IAAIW,KAAJ,CAAUhB,KAAK,CAACiB,aAAN,CAAoBF,KAApB,CAAV,CAAN;AACD,KAVI,CAAP;AAWD,GAhB6B,EAiB9B,EAjB8B,CAAhC;AAoBA,MAAMG,iBAAiB,GAAGpB,WAAW,CACnC,UAACqB,OAAD,EAAUC,MAAV,EAAqB;AACnB,QAAMC,OAAO,sBAAOf,OAAP,CAAb;;AACA,QAAMgB,OAAO,GAAGhB,OAAO,CAACiB,GAAR,CAAY,UAAAC,CAAC,EAAI;AAC/B,aAAOA,CAAC,CAACC,EAAF,KAAON,OAAP,mCAAoBK,CAApB;AAAuBJ,QAAAA,MAAM,EAAEA;AAA/B,WAAuCI,CAA9C;AACD,KAFe,CAAhB;AAGAjB,IAAAA,UAAU,CAACe,OAAD,CAAV;AACA,WAAOpB,iBAAiB,CAACiB,OAAD,EAAUC,MAAV,CAAjB,UACE,UAAAL,KAAK,EAAI;AACdR,MAAAA,UAAU,CAACc,OAAD,CAAV;AACA,YAAM,IAAIL,KAAJ,CAAUhB,KAAK,CAACiB,aAAN,CAAoBF,KAApB,CAAV,CAAN;AACD,KAJI,CAAP;AAKD,GAZkC,EAanC,CAACT,OAAD,CAbmC,CAArC;AAgBA,SAAO;AACLI,IAAAA,YAAY,EAAZA,YADK;AAELQ,IAAAA,iBAAiB,EAAjBA,iBAFK;AAGLd,IAAAA,eAAe,EAAfA,eAHK;AAILE,IAAAA,OAAO,EAAPA,OAJK;AAKLE,IAAAA,YAAY,EAAZA;AALK,GAAP;AAOD;;GAhDuBL,e","sourcesContent":["import { useCallback, useState } from 'react';\nimport Utils from '../lib/utils';\n\nimport { \n  getEntries,\n  updateEntryStatus\n} from '../services/whitelisting';\n\nexport default function useWhitelisting() {\n  const [fetchingEntries, setFetchingEntries] = useState(false);\n  const [entries, setEntries] = useState([]);\n  const [totalEntries, setTotalEntries] = useState(0);\n\n  const fetchEntries = useCallback(\n    queryParams => {\n      setFetchingEntries(true);\n      setEntries([]);\n      setTotalEntries(0);\n      return getEntries(queryParams)\n        .then(response => {\n          const { entries, totalCount } = response;\n          setFetchingEntries(false);\n          setEntries(entries || []);\n          setTotalEntries(totalCount || 0);\n        })\n        .catch(error => {\n          setFetchingEntries(false);\n          throw new Error(Utils.parseApiError(error));\n        });\n    },\n    []\n  );\n\n  const changeEntryStatus = useCallback(\n    (entryId, status) => {\n      const oldList = [...entries];\n      const newList = entries.map(o => {\n        return o.id===entryId? {...o, status: status}:o;\n      });\n      setEntries(newList);\n      return updateEntryStatus(entryId, status)\n        .catch(error => {\n          setEntries(oldList);\n          throw new Error(Utils.parseApiError(error));\n        });\n    },\n    [entries]\n  );\n\n  return {\n    fetchEntries,\n    changeEntryStatus,\n    fetchingEntries,\n    entries,\n    totalEntries\n  };\n}"]},"metadata":{},"sourceType":"module"}