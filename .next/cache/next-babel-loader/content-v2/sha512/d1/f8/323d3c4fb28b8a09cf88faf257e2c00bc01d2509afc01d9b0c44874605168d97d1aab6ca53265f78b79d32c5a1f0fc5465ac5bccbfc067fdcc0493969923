{"ast":null,"code":"import { useCallback, useContext } from 'react';\nimport UserContext from '../context/UserContext'; //services\n\nimport { login, loginTwoFactor, requestNewCode, generateAccount, activateAccount } from '../services/auth'; //config\n\nimport { setAuthorizationHeader } from '../config/axios'; //utils\n\nimport Utils from '../lib/utils';\nexport default function useUser() {\n  const {\n    jwt,\n    setJWT,\n    twoFactorAuth,\n    setTwoFactorAuth\n  } = useContext(UserContext);\n  const signIn = useCallback(payload => {\n    return login(payload).then(response => {\n      const {\n        token,\n        twoFactorAuth\n      } = response;\n      setAuthorizationHeader(token);\n      setTwoFactorAuth(twoFactorAuth);\n    }).catch(error => {\n      throw new Error(Utils.parseApiError(error));\n    });\n  }, [setTwoFactorAuth]);\n  const signUp = useCallback(payload => {\n    return generateAccount(payload).then(response => {\n      const {\n        token,\n        account\n      } = response;\n      setAuthorizationHeader(token);\n      return account;\n    }).catch(error => {\n      throw new Error(Utils.parseApiError(error));\n    });\n  }, []);\n  const activate = useCallback(payload => {\n    return activateAccount(payload).then(() => setAuthorizationHeader(null)).catch(error => {\n      throw new Error(Utils.parseApiError(error));\n    });\n  }, []);\n  const singOut = useCallback(() => {\n    sessionStorage.removeItem('auth-token');\n    setJWT(null);\n  }, [setJWT]);\n  const twoFactorSignIn = useCallback(payload => {\n    return loginTwoFactor(payload).then(response => {\n      setJWT(response);\n      setAuthorizationHeader(response);\n      sessionStorage.setItem('auth-token', response);\n    }).catch(error => {\n      throw new Error(Utils.parseApiError(error));\n    });\n  }, [setJWT]);\n  const twoFactorSignUp = useCallback(payload => {\n    return loginTwoFactor(payload).then(response => {\n      setAuthorizationHeader(response);\n    }).catch(error => {\n      throw new Error(Utils.parseApiError(error));\n    });\n  }, []);\n  const requestNewSecurityCode = useCallback(() => {\n    return requestNewCode().catch(error => {\n      throw new Error(Utils.parseApiError(error));\n    });\n  }, []);\n\n  const clearToken = () => {\n    setJWT(null);\n    sessionStorage.removeItem('auth-token');\n  };\n\n  return {\n    jwt,\n    twoFactorAuth,\n    isLoggedIn: Boolean(jwt),\n    signIn,\n    signUp,\n    activate,\n    singOut,\n    twoFactorSignIn,\n    twoFactorSignUp,\n    requestNewSecurityCode,\n    clearToken\n  };\n}","map":{"version":3,"sources":["/home/juanma/projects/membrane-front/src/legacy/hooks/useUser.js"],"names":["useCallback","useContext","UserContext","login","loginTwoFactor","requestNewCode","generateAccount","activateAccount","setAuthorizationHeader","Utils","useUser","jwt","setJWT","twoFactorAuth","setTwoFactorAuth","signIn","payload","then","response","token","catch","error","Error","parseApiError","signUp","account","activate","singOut","sessionStorage","removeItem","twoFactorSignIn","setItem","twoFactorSignUp","requestNewSecurityCode","clearToken","isLoggedIn","Boolean"],"mappings":"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","sourcesContent":["import { useCallback, useContext } from 'react';\nimport UserContext from '../context/UserContext';\n\n//services\nimport {\n  login,\n  loginTwoFactor,\n  requestNewCode,\n  generateAccount,\n  activateAccount\n} from '../services/auth';\n\n//config\nimport { setAuthorizationHeader } from '../config/axios';\n\n//utils\nimport Utils from '../lib/utils';\n\nexport default function useUser() {\n  const { jwt, setJWT, twoFactorAuth, setTwoFactorAuth } =\n    useContext(UserContext);\n\n  const signIn = useCallback(\n    payload => {\n      return login(payload)\n        .then(response => {\n          const { token, twoFactorAuth } = response;\n\n          setAuthorizationHeader(token);\n          setTwoFactorAuth(twoFactorAuth);\n        })\n        .catch(error => {\n          throw new Error(Utils.parseApiError(error));\n        });\n    },\n    [setTwoFactorAuth]\n  );\n\n  const signUp = useCallback(payload => {\n    return generateAccount(payload)\n      .then(response => {\n        const { token, account } = response;\n        setAuthorizationHeader(token);\n        return account;\n      })\n      .catch(error => {\n        throw new Error(Utils.parseApiError(error));\n      });\n  }, []);\n\n  const activate = useCallback(payload => {\n    return activateAccount(payload)\n      .then(() => setAuthorizationHeader(null))\n      .catch(error => {\n        throw new Error(Utils.parseApiError(error));\n      });\n  }, []);\n\n  const singOut = useCallback(() => {\n    sessionStorage.removeItem('auth-token');\n    setJWT(null);\n  }, [setJWT]);\n\n  const twoFactorSignIn = useCallback(\n    payload => {\n      return loginTwoFactor(payload)\n        .then(response => {\n          setJWT(response);\n          setAuthorizationHeader(response);\n          sessionStorage.setItem('auth-token', response);\n        })\n        .catch(error => {\n          throw new Error(Utils.parseApiError(error));\n        });\n    },\n    [setJWT]\n  );\n\n  const twoFactorSignUp = useCallback(payload => {\n    return loginTwoFactor(payload)\n      .then(response => {\n        setAuthorizationHeader(response);\n      })\n      .catch(error => {\n        throw new Error(Utils.parseApiError(error));\n      });\n  }, []);\n\n  const requestNewSecurityCode = useCallback(() => {\n    return requestNewCode().catch(error => {\n      throw new Error(Utils.parseApiError(error));\n    });\n  }, []);\n\n  const clearToken = () => {\n    setJWT(null);\n    sessionStorage.removeItem('auth-token');\n  };\n\n  return {\n    jwt,\n    twoFactorAuth,\n    isLoggedIn: Boolean(jwt),\n    signIn,\n    signUp,\n    activate,\n    singOut,\n    twoFactorSignIn,\n    twoFactorSignUp,\n    requestNewSecurityCode,\n    clearToken\n  };\n}\n"]},"metadata":{},"sourceType":"module"}