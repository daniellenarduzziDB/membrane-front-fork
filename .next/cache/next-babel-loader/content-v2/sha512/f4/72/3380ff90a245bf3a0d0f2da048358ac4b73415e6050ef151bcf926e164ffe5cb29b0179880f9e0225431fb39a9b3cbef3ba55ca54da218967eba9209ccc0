{"ast":null,"code":"import _defineProperty from \"/home/juanma/projects/membrane-front/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/juanma/projects/membrane-front/src/legacy/components/Form/Field/MobileNumber/index.js\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect } from 'react';\nimport classnames from 'classnames'; //styles\n\nimport * as styles from './styles.module.scss';\nimport * as fieldStyles from '../styles.module.scss'; //regex\n\nimport * as regex from '../../../../helpers/regex'; //services\n\nimport { getCountries } from '../../../../services/countries';\nimport DropDown from '../DropDown';\nexport default function MobileNumber(_ref) {\n  _s();\n\n  var name = _ref.name,\n      isSubmitted = _ref.isSubmitted,\n      trigger = _ref.trigger,\n      register = _ref.register,\n      setValue = _ref.setValue,\n      getValues = _ref.getValues;\n  //bind styles\n  classnames.bind(styles);\n  classnames.bind(fieldStyles); //states\n\n  var _useState = useState([]),\n      countries = _useState[0],\n      setCountries = _useState[1];\n\n  useEffect(function () {\n    getCountries().then(function (response) {\n      setCountries(response);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classnames(styles.mobileNumber),\n    children: [/*#__PURE__*/_jsxDEV(DropDown, {\n      classes: fieldStyles['col-4'],\n      items: countries,\n      name: \"phoneCode\",\n      placeholder: \"+1\",\n      labelKey: \"country_id\",\n      valueKey: \"country_id\",\n      displayKey: \"phone_code\",\n      register: register,\n      setValue: setValue,\n      onOptionChanged: function onOptionChanged(value) {\n        var country = countries.find(function (c) {\n          return c.country_id === value;\n        });\n        setValue('country', country.country_id);\n        setValue('prefix', country.phone_code);\n        if (isSubmitted) trigger(name);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classnames(fieldStyles.fieldInput, fieldStyles['col-7']),\n      children: /*#__PURE__*/_jsxDEV(\"input\", _objectSpread({\n        placeholder: \"Mobile number\",\n        onKeyDown: function onKeyDown(e) {\n          if (e.key !== 'Backspace' && !regex.ONLY_NUMBERS.test(e.key)) e.preventDefault();\n        }\n      }, register(name, {\n        required: 'This field is required',\n        validate: {\n          phoneNumberComplete: function phoneNumberComplete() {\n            var values = getValues();\n            var prefix = values.prefix;\n            var phone = values[name];\n            if (!prefix || !phone) return 'This field is required';\n          }\n        }\n      })), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MobileNumber, \"u5xOCJaVOCLA9QSfvEC1BLxOVIw=\");\n\n_c = MobileNumber;\n\nvar _c;\n\n$RefreshReg$(_c, \"MobileNumber\");","map":{"version":3,"sources":["/home/juanma/projects/membrane-front/src/legacy/components/Form/Field/MobileNumber/index.js"],"names":["useState","useEffect","classnames","styles","fieldStyles","regex","getCountries","DropDown","MobileNumber","name","isSubmitted","trigger","register","setValue","getValues","bind","countries","setCountries","then","response","mobileNumber","value","country","find","c","country_id","phone_code","fieldInput","e","key","ONLY_NUMBERS","test","preventDefault","required","validate","phoneNumberComplete","values","prefix","phone"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport classnames from 'classnames';\n\n//styles\nimport * as styles from './styles.module.scss';\nimport * as fieldStyles from '../styles.module.scss';\n\n//regex\nimport * as regex from '../../../../helpers/regex';\n\n//services\nimport { getCountries } from '../../../../services/countries';\n\nimport DropDown from '../DropDown';\n\nexport default function MobileNumber({\n  name,\n  isSubmitted,\n  trigger,\n  register,\n  setValue,\n  getValues\n}) {\n  //bind styles\n  classnames.bind(styles);\n  classnames.bind(fieldStyles);\n\n  //states\n  const [countries, setCountries] = useState([]);\n\n  useEffect(() => {\n    getCountries().then(response => {\n      setCountries(response);\n    });\n  }, []);\n\n  return (\n    <div className={classnames(styles.mobileNumber)}>\n      <DropDown\n        classes={fieldStyles['col-4']}\n        items={countries}\n        name=\"phoneCode\"\n        placeholder=\"+1\"\n        labelKey=\"country_id\"\n        valueKey=\"country_id\"\n        displayKey=\"phone_code\"\n        register={register}\n        setValue={setValue}\n        onOptionChanged={value => {\n          let country = countries.find(c => c.country_id === value);\n\n          setValue('country', country.country_id);\n          setValue('prefix', country.phone_code);\n          if (isSubmitted) trigger(name);\n        }}\n      />\n\n      <div className={classnames(fieldStyles.fieldInput, fieldStyles['col-7'])}>\n        <input\n          placeholder=\"Mobile number\"\n          onKeyDown={e => {\n            if (e.key !== 'Backspace' && !regex.ONLY_NUMBERS.test(e.key))\n              e.preventDefault();\n          }}\n          {...register(name, {\n            required: 'This field is required',\n            validate: {\n              phoneNumberComplete: () => {\n                const values = getValues();\n\n                let prefix = values.prefix;\n                let phone = values[name];\n\n                if (!prefix || !phone) return 'This field is required';\n              }\n            }\n          })}\n        />\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}