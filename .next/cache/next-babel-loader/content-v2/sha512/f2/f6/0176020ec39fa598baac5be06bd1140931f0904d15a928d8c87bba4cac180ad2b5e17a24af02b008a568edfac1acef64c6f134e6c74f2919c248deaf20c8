{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useCallback, useState } from 'react';\nimport Utils from '../lib/utils';\nimport { getEntries, updateEntryStatus } from '../services/whitelisting';\nexport default function useWhitelisting() {\n  const {\n    0: fetchingEntries,\n    1: setFetchingEntries\n  } = useState(false);\n  const {\n    0: entries,\n    1: setEntries\n  } = useState([]);\n  const {\n    0: totalEntries,\n    1: setTotalEntries\n  } = useState(0);\n  const fetchEntries = useCallback(queryParams => {\n    setFetchingEntries(true);\n    setEntries([]);\n    setTotalEntries(0);\n    return getEntries(queryParams).then(response => {\n      const {\n        entries,\n        totalCount\n      } = response;\n      setFetchingEntries(false);\n      setEntries(entries || []);\n      setTotalEntries(totalCount || 0);\n    }).catch(error => {\n      setFetchingEntries(false);\n      throw new Error(Utils.parseApiError(error));\n    });\n  }, []);\n  const changeEntryStatus = useCallback((entryId, status) => {\n    const oldList = [...entries];\n    const newList = entries.map(o => {\n      return o.id === entryId ? _objectSpread(_objectSpread({}, o), {}, {\n        status: status\n      }) : o;\n    });\n    setEntries(newList);\n    return updateEntryStatus(entryId, status).catch(error => {\n      setEntries(oldList);\n      throw new Error(Utils.parseApiError(error));\n    });\n  }, [entries]);\n  return {\n    fetchEntries,\n    changeEntryStatus,\n    fetchingEntries,\n    entries,\n    totalEntries\n  };\n}","map":{"version":3,"sources":["/home/juanma/projects/membrane-front/src/legacy/hooks/useWhitelisting.js"],"names":["useCallback","useState","Utils","getEntries","updateEntryStatus","useWhitelisting","fetchingEntries","setFetchingEntries","entries","setEntries","totalEntries","setTotalEntries","fetchEntries","queryParams","then","response","totalCount","catch","error","Error","parseApiError","changeEntryStatus","entryId","status","oldList","newList","map","o","id"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,OAAOC,KAAP,MAAkB,cAAlB;AAEA,SACEC,UADF,EAEEC,iBAFF,QAGO,0BAHP;AAKA,eAAe,SAASC,eAAT,GAA2B;AACxC,QAAM;AAAA,OAACC,eAAD;AAAA,OAAkBC;AAAlB,MAAwCN,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM;AAAA,OAACO,OAAD;AAAA,OAAUC;AAAV,MAAwBR,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM;AAAA,OAACS,YAAD;AAAA,OAAeC;AAAf,MAAkCV,QAAQ,CAAC,CAAD,CAAhD;AAEA,QAAMW,YAAY,GAAGZ,WAAW,CAC9Ba,WAAW,IAAI;AACbN,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAE,IAAAA,UAAU,CAAC,EAAD,CAAV;AACAE,IAAAA,eAAe,CAAC,CAAD,CAAf;AACA,WAAOR,UAAU,CAACU,WAAD,CAAV,CACJC,IADI,CACCC,QAAQ,IAAI;AAChB,YAAM;AAAEP,QAAAA,OAAF;AAAWQ,QAAAA;AAAX,UAA0BD,QAAhC;AACAR,MAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACAE,MAAAA,UAAU,CAACD,OAAO,IAAI,EAAZ,CAAV;AACAG,MAAAA,eAAe,CAACK,UAAU,IAAI,CAAf,CAAf;AACD,KANI,EAOJC,KAPI,CAOEC,KAAK,IAAI;AACdX,MAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACA,YAAM,IAAIY,KAAJ,CAAUjB,KAAK,CAACkB,aAAN,CAAoBF,KAApB,CAAV,CAAN;AACD,KAVI,CAAP;AAWD,GAhB6B,EAiB9B,EAjB8B,CAAhC;AAoBA,QAAMG,iBAAiB,GAAGrB,WAAW,CACnC,CAACsB,OAAD,EAAUC,MAAV,KAAqB;AACnB,UAAMC,OAAO,GAAG,CAAC,GAAGhB,OAAJ,CAAhB;AACA,UAAMiB,OAAO,GAAGjB,OAAO,CAACkB,GAAR,CAAYC,CAAC,IAAI;AAC/B,aAAOA,CAAC,CAACC,EAAF,KAAON,OAAP,mCAAoBK,CAApB;AAAuBJ,QAAAA,MAAM,EAAEA;AAA/B,WAAuCI,CAA9C;AACD,KAFe,CAAhB;AAGAlB,IAAAA,UAAU,CAACgB,OAAD,CAAV;AACA,WAAOrB,iBAAiB,CAACkB,OAAD,EAAUC,MAAV,CAAjB,CACJN,KADI,CACEC,KAAK,IAAI;AACdT,MAAAA,UAAU,CAACe,OAAD,CAAV;AACA,YAAM,IAAIL,KAAJ,CAAUjB,KAAK,CAACkB,aAAN,CAAoBF,KAApB,CAAV,CAAN;AACD,KAJI,CAAP;AAKD,GAZkC,EAanC,CAACV,OAAD,CAbmC,CAArC;AAgBA,SAAO;AACLI,IAAAA,YADK;AAELS,IAAAA,iBAFK;AAGLf,IAAAA,eAHK;AAILE,IAAAA,OAJK;AAKLE,IAAAA;AALK,GAAP;AAOD","sourcesContent":["import { useCallback, useState } from 'react';\nimport Utils from '../lib/utils';\n\nimport { \n  getEntries,\n  updateEntryStatus\n} from '../services/whitelisting';\n\nexport default function useWhitelisting() {\n  const [fetchingEntries, setFetchingEntries] = useState(false);\n  const [entries, setEntries] = useState([]);\n  const [totalEntries, setTotalEntries] = useState(0);\n\n  const fetchEntries = useCallback(\n    queryParams => {\n      setFetchingEntries(true);\n      setEntries([]);\n      setTotalEntries(0);\n      return getEntries(queryParams)\n        .then(response => {\n          const { entries, totalCount } = response;\n          setFetchingEntries(false);\n          setEntries(entries || []);\n          setTotalEntries(totalCount || 0);\n        })\n        .catch(error => {\n          setFetchingEntries(false);\n          throw new Error(Utils.parseApiError(error));\n        });\n    },\n    []\n  );\n\n  const changeEntryStatus = useCallback(\n    (entryId, status) => {\n      const oldList = [...entries];\n      const newList = entries.map(o => {\n        return o.id===entryId? {...o, status: status}:o;\n      });\n      setEntries(newList);\n      return updateEntryStatus(entryId, status)\n        .catch(error => {\n          setEntries(oldList);\n          throw new Error(Utils.parseApiError(error));\n        });\n    },\n    [entries]\n  );\n\n  return {\n    fetchEntries,\n    changeEntryStatus,\n    fetchingEntries,\n    entries,\n    totalEntries\n  };\n}"]},"metadata":{},"sourceType":"module"}