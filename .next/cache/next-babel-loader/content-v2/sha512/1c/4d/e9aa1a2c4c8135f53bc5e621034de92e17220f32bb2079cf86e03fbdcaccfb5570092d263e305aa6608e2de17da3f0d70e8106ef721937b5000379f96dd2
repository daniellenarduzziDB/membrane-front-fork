{"ast":null,"code":"import { request } from '../config/axios';\nimport Utils from '../lib/utils'; //Sign In\n\nconst login = payload => {\n  return request.post('v2/login', payload).then(response => {\n    const {\n      error,\n      data\n    } = response.data;\n\n    if (error) {\n      throw new Error(Utils.parseApiError(error));\n    } else return data;\n  });\n};\n\nconst loginTwoFactor = payload => {\n  return request.post('v2/two-steps-auth/verify', payload).then(response => {\n    const {\n      error,\n      data\n    } = response.data;\n\n    if (error) {\n      throw new Error(Utils.parseApiError(error));\n    } else return data;\n  });\n}; //Sign Up\n\n\nconst generateAccount = payload => {\n  return request.post('v2/accounts', payload).then(response => {\n    const {\n      error,\n      data\n    } = response.data;\n\n    if (error) {\n      throw new Error(Utils.parseApiError(error));\n    } else return data;\n  });\n};\n\nconst activateAccount = payload => {\n  return request.post('v2/accounts/me/activate', payload).then(response => {\n    const {\n      error,\n      data\n    } = response.data;\n\n    if (error) {\n      throw new Error(Utils.parseApiError(error));\n    } else return data;\n  });\n}; //Global\n\n\nconst requestNewCode = () => {\n  return request.post('v2/two-steps-auth/generate').then(response => {\n    const {\n      error,\n      data\n    } = response.data;\n\n    if (error) {\n      throw new Error(Utils.parseApiError(error));\n    } else return data;\n  });\n};\n\nconst isLoggedIn = () => {\n  const token = sessionStorage.getItem('auth-token');\n  return !!token;\n};\n\nexport { login, loginTwoFactor, generateAccount, activateAccount, requestNewCode, isLoggedIn };","map":{"version":3,"sources":["/home/juanma/projects/membrane-front/src/legacy/services/auth.js"],"names":["request","Utils","login","payload","post","then","response","error","data","Error","parseApiError","loginTwoFactor","generateAccount","activateAccount","requestNewCode","isLoggedIn","token","sessionStorage","getItem"],"mappings":"AAAA,SAASA,OAAT,QAAwB,iBAAxB;AACA,OAAOC,KAAP,MAAkB,cAAlB,C,CAEA;;AACA,MAAMC,KAAK,GAAGC,OAAO,IAAI;AACvB,SAAOH,OAAO,CAACI,IAAR,CAAa,UAAb,EAAyBD,OAAzB,EAAkCE,IAAlC,CAAuCC,QAAQ,IAAI;AACxD,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkBF,QAAQ,CAACE,IAAjC;;AACA,QAAID,KAAJ,EAAW;AACT,YAAM,IAAIE,KAAJ,CAAUR,KAAK,CAACS,aAAN,CAAoBH,KAApB,CAAV,CAAN;AACD,KAFD,MAEO,OAAOC,IAAP;AACR,GALM,CAAP;AAMD,CAPD;;AASA,MAAMG,cAAc,GAAGR,OAAO,IAAI;AAChC,SAAOH,OAAO,CAACI,IAAR,CAAa,0BAAb,EAAyCD,OAAzC,EAAkDE,IAAlD,CAAuDC,QAAQ,IAAI;AACxE,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkBF,QAAQ,CAACE,IAAjC;;AACA,QAAID,KAAJ,EAAW;AACT,YAAM,IAAIE,KAAJ,CAAUR,KAAK,CAACS,aAAN,CAAoBH,KAApB,CAAV,CAAN;AACD,KAFD,MAEO,OAAOC,IAAP;AACR,GALM,CAAP;AAMD,CAPD,C,CASA;;;AACA,MAAMI,eAAe,GAAGT,OAAO,IAAI;AACjC,SAAOH,OAAO,CAACI,IAAR,CAAa,aAAb,EAA4BD,OAA5B,EAAqCE,IAArC,CAA0CC,QAAQ,IAAI;AAC3D,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkBF,QAAQ,CAACE,IAAjC;;AACA,QAAID,KAAJ,EAAW;AACT,YAAM,IAAIE,KAAJ,CAAUR,KAAK,CAACS,aAAN,CAAoBH,KAApB,CAAV,CAAN;AACD,KAFD,MAEO,OAAOC,IAAP;AACR,GALM,CAAP;AAMD,CAPD;;AASA,MAAMK,eAAe,GAAGV,OAAO,IAAI;AACjC,SAAOH,OAAO,CAACI,IAAR,CAAa,yBAAb,EAAwCD,OAAxC,EAAiDE,IAAjD,CAAsDC,QAAQ,IAAI;AACvE,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkBF,QAAQ,CAACE,IAAjC;;AACA,QAAID,KAAJ,EAAW;AACT,YAAM,IAAIE,KAAJ,CAAUR,KAAK,CAACS,aAAN,CAAoBH,KAApB,CAAV,CAAN;AACD,KAFD,MAEO,OAAOC,IAAP;AACR,GALM,CAAP;AAMD,CAPD,C,CASA;;;AACA,MAAMM,cAAc,GAAG,MAAM;AAC3B,SAAOd,OAAO,CAACI,IAAR,CAAa,4BAAb,EAA2CC,IAA3C,CAAgDC,QAAQ,IAAI;AACjE,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkBF,QAAQ,CAACE,IAAjC;;AACA,QAAID,KAAJ,EAAW;AACT,YAAM,IAAIE,KAAJ,CAAUR,KAAK,CAACS,aAAN,CAAoBH,KAApB,CAAV,CAAN;AACD,KAFD,MAEO,OAAOC,IAAP;AACR,GALM,CAAP;AAMD,CAPD;;AASA,MAAMO,UAAU,GAAG,MAAM;AACvB,QAAMC,KAAK,GAAGC,cAAc,CAACC,OAAf,CAAuB,YAAvB,CAAd;AACA,SAAO,CAAC,CAACF,KAAT;AACD,CAHD;;AAKA,SACEd,KADF,EAEES,cAFF,EAGEC,eAHF,EAIEC,eAJF,EAKEC,cALF,EAMEC,UANF","sourcesContent":["import { request } from '../config/axios';\nimport Utils from '../lib/utils';\n\n//Sign In\nconst login = payload => {\n  return request.post('v2/login', payload).then(response => {\n    const { error, data } = response.data;\n    if (error) {\n      throw new Error(Utils.parseApiError(error));\n    } else return data;\n  });\n};\n\nconst loginTwoFactor = payload => {\n  return request.post('v2/two-steps-auth/verify', payload).then(response => {\n    const { error, data } = response.data;\n    if (error) {\n      throw new Error(Utils.parseApiError(error));\n    } else return data;\n  });\n};\n\n//Sign Up\nconst generateAccount = payload => {\n  return request.post('v2/accounts', payload).then(response => {\n    const { error, data } = response.data;\n    if (error) {\n      throw new Error(Utils.parseApiError(error));\n    } else return data;\n  });\n};\n\nconst activateAccount = payload => {\n  return request.post('v2/accounts/me/activate', payload).then(response => {\n    const { error, data } = response.data;\n    if (error) {\n      throw new Error(Utils.parseApiError(error));\n    } else return data;\n  });\n};\n\n//Global\nconst requestNewCode = () => {\n  return request.post('v2/two-steps-auth/generate').then(response => {\n    const { error, data } = response.data;\n    if (error) {\n      throw new Error(Utils.parseApiError(error));\n    } else return data;\n  });\n};\n\nconst isLoggedIn = () => {\n  const token = sessionStorage.getItem('auth-token');\n  return !!token;\n};\n\nexport {\n  login,\n  loginTwoFactor,\n  generateAccount,\n  activateAccount,\n  requestNewCode,\n  isLoggedIn\n};\n"]},"metadata":{},"sourceType":"module"}